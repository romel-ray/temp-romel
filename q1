Instructions
1. Code has to be written in C++ preferably on linux using g++ .
2. You should complete the test within two days.
3. Do not use any external libraries like boost, folly etc.
4. Complete code with build instructions have to be zipped and mailed back to
jchandran@centillionresearch.com and anair@centillionresearch.com
Circular Printer
Write a program which takes three inputs (command line)
1. A string
2. char count (integer)
3. thread count - no of Threads(integer).
Each thread then should start printing the chars in the string sequentially in the following format:
eg:
> myprinter ABCDEFGHIJ 3 4
outPut:
Using 4 threads to print ABCDEFGHIJ alternatively in set of 3 chars
Thread1: ABC
Thread2: DEF
Thread3: GHI
Thread4: JAB
Thread1: CDE
Thread2: FGH
Thread3: IJA
......
Your program output should strictly adhere to the above output apart from that it should perform well on
following grounds -
● Good synchronization technique (starvation free)
● Object oriented paradigm

================================================================


On The Fly Sort
Implement a TCP server and a TCP client. There will be 3 instances of server and 1 instance of client. Client
should connect to all 3 instances of server when it starts.
On receiving EOS(End Of Stream) message from all the servers, client should print all the numbers got from all
the servers in sorted ascending order.
EOS is explained in the following specification:
Application Protocol
----------------------
● Message will contain a fixed size header of 3 bytes and 8 byte body
○ |Header - 3 bytes|Body - 8 bytes|
● Header Format
○ |Message Type - 3 bytes|
○ Message Type is a 3 byte integer with the following values:
■ 0 - Connect
■ 1 - EOS(End of Stream)
■ 2 - RequestStream
■ 3 - StreamResponse
■ 4 - ConnectionResponse
Message Specification
----------------------
● Format of all message is
○ |3 bytes Header|4 bytes integer|
● Connect
○ |0|0|
● EOS
○ |1|0|
● RequestStream
○ |1|SeqNum|
○ SeqNum is generated by client by taking the nanoseconds since epoch
● StreamResponse
○ |2|Response|
○ Algorithm for generating Response is detailed in server specification
● ConnectionResponse
○ |3|0|
Server Specification
----------------------
● Server start processing a client when it receives 'Connect' message. If any other message is
received, server will terminate the connection
● On receiving 'Connect' message, server responsds with 'ConnectionResponse'
● On receiving 'RequestStream' message, server starts sending 'StreamResponseMessage' as per
the following
○ 'RequestStream' contains 4 byte integer as body, which we call 'SeqNum'
○ 'StreamResponseMessage' contains 4 byte integer as the body
○ Each 'StreamResponseMessage' is created by monotonically increasing 'SeqNum'
○ After sending a 'StreamResponseMessage' server sleeps for 100 milliseconds
○ Server will send 10,000 StreamResponseMessages
○ After sending all the response, Server will send 'EOS' message
Client Specification
-----------------------------
● Connect to 3 servers
● Send Connection request to each servers
● On receiving 'ConnectionResponse', send 'RequestStream'
○ SeqNum should be 8 byte integer which represents nanoseconds since epoch after getting
the connection response
● Start receiving 'StreamResponse' mesasges
● On receiving 'Disconnect' message from all the 3 servers
○ Print all the numbers, from all the servers, in sorted ascending order 

=============================================================================
Versioned Queue
Design and implement a Version-Queue. A Version-Queue maintains a version number along with normal
Queue functionality. Every operation[Enqueue/Dequeue] on the Queue increments its version.
Implement the following functions:
1. Enqueue - appends an element at the end of the queue.
2. Dequeue - remove the top element of the queue.
3. Top - return top element of tje queue
4. Print - it takes a version number as input and prints the elements of the queue of the given version. If no
version is specified, then it should print the last version of the queue.
For instance if the elements are integers:
> Enqueu(1) # version 1
> Enqueu(10) # version 2
> Enqueu(5) # version 3
> Print()
>> 1 10 5
> Dequeu() # version 4
> Top()
>> 10
> Print()
>> 10 5
> Print(1)
>> 1
> Print(2)
>> 1 10
> Print(3)
>> 1 10 5
> Print(4)
>> 10 5
