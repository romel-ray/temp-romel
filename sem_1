
#include <iostream>
#include <vector>
#include <set>
#include<bits/stdc++.h>
#include<algorithm>

using namespace std;

set<int> get_digits(int number)
{
	set<int> num_seg;
	while(number != 0)
	{
		int rem = number%10;
		number = number/10;
		num_seg.insert(rem);
	}
	return num_seg;
}

bool is_set_different(set<int> a, set<int> b)
{
    bool is_diff = true;
    set<int>::iterator it1, it2;
    for(it1=a.begin(); it1!=a.end(); it1++)
    {
        it2 = b.find(*it1);
        if (it2 != b.end())
        {
            is_diff = false;
            break;
        }
    }
    return is_diff;
}

void replace_set(set<int>& to_be_rep, set<int> a, set<int> b)
{
    to_be_rep.clear();
    to_be_rep.insert(a.begin(),a.end());
    to_be_rep.insert(b.begin(),b.end());
}

void compute(vector<int> input_set)
{
    vector<int> sum_set = input_set;
    vector<set<int>> orig_digit_set, new_digit_set;

    for(int i=0; i<input_set.size();i++)
    {
        orig_digit_set.push_back(get_digits(input_set[i]));
        
        new_digit_set.push_back(orig_digit_set[i]);
        
    }
    
    for(int i=1; i<input_set.size();i++)
    {
        for(int j=0; j<i; j++)
        {
           if(is_set_different(new_digit_set[i], new_digit_set[j]))
           {
               if((sum_set[j] + sum_set[i]) > sum_set[i])
               {
                   sum_set[i] = sum_set[j] + sum_set[i];
                   replace_set(new_digit_set[i], new_digit_set[i], new_digit_set[j]);
               }
               
           }
           else if(is_set_different(new_digit_set[i], orig_digit_set[j]) && 
                is_set_different(orig_digit_set[i], new_digit_set[j]))    
           {
               int s1 = input_set[j] + sum_set[i];
               int s2 = sum_set[j] + input_set[i];
               if(s1 > s2)
               {
                   if( s1 > sum_set[i])
                   {
                       sum_set[i] = input_set[j] + sum_set[i];
                       replace_set(new_digit_set[i], new_digit_set[i], orig_digit_set[j]);
                 
                   }
               }
               else
               {
                   if( s2 > sum_set[i])
                   {
                       sum_set[i] = sum_set[j] + input_set[i];
                       replace_set(new_digit_set[i], orig_digit_set[i], new_digit_set[j]);
                   }
                   
               }
           }
           else if(is_set_different(new_digit_set[i], orig_digit_set[j]))
           {
               int s1 = input_set[j] + sum_set[i];
               
                if( s1 > sum_set[i])
                   {
                       sum_set[i] = input_set[j] + sum_set[i];
                       replace_set(new_digit_set[i], new_digit_set[i], orig_digit_set[j]);
                 
                   }
           }
           else if(is_set_different(orig_digit_set[i], new_digit_set[j]))
           {
               int s2 = sum_set[j] + input_set[i];
                if( s2 > sum_set[i])
                   {
                       sum_set[i] = sum_set[j] + input_set[i];
                       replace_set(new_digit_set[i], orig_digit_set[i], new_digit_set[j]);
                   }
           }
           else if(is_set_different(orig_digit_set[i], orig_digit_set[j]))
           {
               if((input_set[j] + input_set[i]) > sum_set[i])
               {
                   sum_set[i] = input_set[j] + input_set[i];
                   replace_set(new_digit_set[i], orig_digit_set[i], orig_digit_set[j]);
               }
           }
           //cout << " --- " << sum_set[i] << endl;
        
        }
        //cout << " ------- " << sum_set[i] << endl;
    }
    
    std::vector<int>::iterator result;
    result = std::max_element(sum_set.begin(),sum_set.end());
    cout << *result << endl;
}



int main()
{ 

	int num_tests = 0;
    cin >> num_tests;
	vector<vector<int>> test_set;
	

	for(int i=0; i<num_tests; i++)
    {
		int num_boxes;
		cin >> num_boxes;
		vector<int> input_set;
		for(int j=0; j<num_boxes; j++)
		{
			int number;
			cin >> number;
			input_set.push_back(number);
		}
		test_set.push_back(input_set);
    }
    
    for(int i=0; i<num_tests; i++)
    {
        vector<int> input_set = test_set[i];
        
        sort(input_set.begin(),input_set.end());
        compute(input_set);
	}
    return 0;
}








===========================================================
3
4
3 5 7 2
5
121 23 3 333 4
7
32 42 52 62 72 82 92

