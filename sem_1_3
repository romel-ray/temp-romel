#include <iostream>
#include <vector>
#include <set>
#include <unordered_set>
#include <map>
#include<bits/stdc++.h>
#include<algorithm>

using namespace std;

typedef multimap<int, unordered_set<int>> m_map;
typedef m_map::reverse_iterator m_map_iter;

inline unordered_set<int> get_digits(int number)
{
	unordered_set<int> num_seg;
	while(number != 0)
	{
		int rem = number%10;
		number = number/10;
		num_seg.insert(rem);
	}
	return num_seg;
}

inline bool is_set_different(unordered_set<int> a, unordered_set<int> b)
{
    bool is_diff = true;
    unordered_set<int>::iterator it1, it2;
    for(it1=a.begin(); it1!=a.end(); it1++)
    {
        it2 = b.find(*it1);
        if (it2 != b.end())
        {
            is_diff = false;
            break;
        }
    }
    return is_diff;
}

/*
unordered_set<int> add_set(unordered_set<int> a, unordered_set<int> b)
{
    unordered_set<int> temp;
    temp.insert(a.begin(),a.end());
    temp.insert(b.begin(),b.end());
    return temp;
}*/

/*
void compare_and_set(m_map& i_map, m_map& j_map,int& i_sum)
{
    bool inserted = false;
    for(m_map_iter it = i_map.rbegin(); it != i_map.rend(); it++)
    {
        for (m_map_iter it1 = j_map.rbegin(); it1 != j_map.rend(); it1++)
        {
            if(is_set_different(it->second,it1->second))
            {
                int sum = it->first + it1->first;
                if(sum > i_sum)
                {
                    set <int> temp_set = add_set(it->second, it1->second);
                    i_map.insert(pair<int, unordered_set<int>>(sum,temp_set));
                    i_sum = sum;
                    inserted = true;
                    break;
                }
            }
            if (inserted)
                break;
        }
    }
}
*/

void compute(vector<int> input_set)
{
    vector<int> sum_set = input_set;
    vector<multimap<int, unordered_set<int>>> digit_set;

    //for(int i=0; i<input_set.size();i++)
    //{
        unordered_set<int> temp = get_digits(input_set[0]);
        multimap<int, unordered_set<int>> t_map;
        t_map.insert(pair<int, unordered_set<int>>(input_set[0],temp));
        digit_set.push_back(t_map);
    //}
    
    for(int i=1; i<input_set.size();i++)
    {
                
        unordered_set<int> temp = get_digits(input_set[i]);
        multimap<int, unordered_set<int>> t_map;
        t_map.insert(pair<int, unordered_set<int>>(input_set[i],temp));
        digit_set.push_back(t_map);
        
        for(int j=0; j<i; j++)
        {
            //compare_and_set(digit_set[i],digit_set[j], sum_set[i]);
            bool inserted = false;
            for(m_map_iter it = digit_set[i].rbegin(); it != digit_set[i].rend(); it++)
            {
                for (m_map_iter it1 = digit_set[j].rbegin(); it1 != digit_set[j].rend(); it1++)
                {
                    //if(is_set_different(it->second,it1->second))
                    bool is_diff = true;
                    unordered_set<int>::iterator iter1, iter2;
                    for(iter1=it->second.begin(); iter1!=it->second.end(); iter1++)
                    {
                        iter2 = it1->second.find(*iter1);
                        if (iter2 != it1->second.end())
                        {
                            is_diff = false;
                            break;
                        }
                    }
                    if(is_diff)
                    {
                        int sum = it->first + it1->first;
                        if(sum > sum_set[i])
                        {
                            //unordered_set<int> temp_set = add_set(it->second, it1->second);
                            unordered_set<int> temp;
                            temp.insert(it->second.begin(), it->second.end());
                            temp.insert(it1->second.begin(), it1->second.end());
                            
                            digit_set[i].insert(pair<int, unordered_set<int>>(sum,temp));
                            sum_set[i] = sum;
                            inserted = true;
                            break;
                        }
                    }
                   
                }
                if(inserted)
                    break;
            }
            //cout << "---" << sum_set[i] << endl;
        }
        //cout << "-------------" << sum_set[i] << endl;
    }
    
    std::vector<int>::iterator result;
    result = std::max_element (sum_set.begin(),sum_set.end());
    cout << *result << endl;
}

int main()
{ 

	int num_tests = 0;
    cin >> num_tests;
	vector<vector<int>> test_set;
	

	for(int i=0; i<num_tests; i++)
    {
		int num_boxes;
		cin >> num_boxes;
		vector<int> input_set;
		for(int j=0; j<num_boxes; j++)
		{
			int number;
			cin >> number;
			input_set.push_back(number);
		}
		test_set.push_back(input_set);
    }
    
    for(int i=0; i<num_tests; i++)
    {
        vector<int> input_set = test_set[i];
        
        //sort(input_set.begin(),input_set.end());
        compute(input_set);
	}
    return 0;
}
